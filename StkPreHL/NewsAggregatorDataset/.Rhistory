d=9
TEST=NULL
seqd=seq(1,d,by=1)
for(i in seqd[seqd!=d]){
seqdj=seq(i+1,d,by=1)
for(j in seqdj){
seqdk=seqd[seqd!=i&seqd!=j]
for(k in seqdk){
TEST=rbind(TEST,c(i,j,k))
}
}
}
#######
TEST
dim(TEST)
9*8/2*7
######################################################################
cond_cor <- function(CorXY,CorXZ,CorZY){
cond_cor=(CorXY-CorXZ8CorZY)/(sqrt(1-CorXZ^2)*sqrt(1-CorZY^2))
return(cond_cor)
}
cont_IndTest<-function(A){
CorM=cor(A)
d=dim(C)[1]
B=NULL
seqd=seq(1,d,by=1)
for(i in seqd[seqd!=d]){
seqdj=seq(i+1,d,by=1)
for(j in seqdj){
seqdk=seqd[seqd!=i&seqd!=j]
for(k in seqdk){
B=rbind(B,c(i,j,k,cond_cor(CorM(i,j),CorM(i,k),CorM(j,k))))
}
}
}
}
cond_cor <- function(CorXY,CorXZ,CorZY){
cond_cor=(CorXY-CorXZ8CorZY)/(sqrt(1-CorXZ^2)*sqrt(1-CorZY^2))
return(cond_cor)
}
cont_IndTest<-function(A){
CorM=cor(A)
d=dim(C)[1]
B=NULL
seqd=seq(1,d,by=1)
for(i in seqd[seqd!=d]){
seqdj=seq(i+1,d,by=1)
for(j in seqdj){
seqdk=seqd[seqd!=i&seqd!=j]
for(k in seqdk){
B=rbind(B,c(i,j,k,cond_cor(CorM(i,j),CorM(i,k),CorM(j,k))))
}
}
}
return(B)
}
cont_IndTest(deug$tab)
CorM=cor(deug$tab)
cond_cor(CorM(1,2),CorM(1,3),CorM(2,3))
######################################################################
cond_cor <- function(CorXY,CorXZ,CorZY){
cond_cor=(CorXY-CorXZ8CorZY)/(sqrt(1-CorXZ^2)*sqrt(1-CorZY^2))
return(cond_cor)
}
cont_IndTest<-function(A){
CorM=cor(A)
d=dim(C)[1]
B=NULL
seqd=seq(1,d,by=1)
for(i in seqd[seqd!=d]){
seqdj=seq(i+1,d,by=1)
for(j in seqdj){
seqdk=seqd[seqd!=i&seqd!=j]
for(k in seqdk){
B=rbind(B,c(i,j,k,cond_cor(CorM[i,j],CorM[i,k],CorM[j,k])))
}
}
}
return(B)
}
cont_IndTest(deug$tab)
######################################################################
cond_cor <- function(CorXY,CorXZ,CorZY){
cond_cor=(CorXY-CorXZ*CorZY)/(sqrt(1-CorXZ^2)*sqrt(1-CorZY^2))
return(cond_cor)
}
cont_IndTest<-function(A){
CorM=cor(A)
d=dim(C)[1]
B=NULL
seqd=seq(1,d,by=1)
for(i in seqd[seqd!=d]){
seqdj=seq(i+1,d,by=1)
for(j in seqdj){
seqdk=seqd[seqd!=i&seqd!=j]
for(k in seqdk){
B=rbind(B,c(i,j,k,cond_cor(CorM[i,j],CorM[i,k],CorM[j,k])))
}
}
}
return(B)
}
cont_IndTest(deug$tab)
?qnorm
qnorm(0.05)
qnorm(1-0.05)
qnorm(0)
qnorm(0.5)
qnorm(0.95)
contM=cont_IndTest(deug$tab)
contM[,4]>qnorm(0.95)
cond_cor <- function(CorXY,CorXZ,CorZY){
cond_cor=(CorXY-CorXZ*CorZY)/(sqrt(1-CorXZ^2)*sqrt(1-CorZY^2))
return(cond_cor)
}
cont_IndTest<-function(A){
CorM=cor(A)
d=dim(C)[1]
B=NULL
seqd=seq(1,d,by=1)
for(i in seqd[seqd!=d]){
seqdj=seq(i+1,d,by=1)
for(j in seqdj){
seqdk=seqd[seqd!=i&seqd!=j]
for(k in seqdk){
CC=cond_cor(CorM[i,j],CorM[i,k],CorM[j,k])
zeta=0.5*log((1+CC)/(1-CC))
n=dim(X)[1]
S=sqrt(n-dim(Z)[1]-3)*abs(zeta)
B=rbind(B,c(i,j,k,S))
}
}
}
return(B)
}
cont_IndTest(deug$tab)
deug$tab
dim(deug[k,])[2]
dim(deug[2,])[2]
dim(deug$tab[2,])[2]
dim(deug$tab[,2])[2]
dim(deug$tab[,2])
dim(deug$tab)
dim(deug$tab[1,])
dim(deug$tab[,1])
dim(deug$tab[,2])
dim(deug$tab[1:104,2])
n=dim(deug$tab)[1]
n
######################################################################
###### More classical tests for zero partial correlation.   ##########
######################################################################
cond_cor <- function(CorXY,CorXZ,CorZY){
cond_cor=(CorXY-CorXZ*CorZY)/(sqrt(1-CorXZ^2)*sqrt(1-CorZY^2))
return(cond_cor)
}
cont_IndTest<-function(A){
CorM=cor(A)
d=dim(C)[1]
B=NULL
seqd=seq(1,d,by=1)
for(i in seqd[seqd!=d]){
seqdj=seq(i+1,d,by=1)
for(j in seqdj){
seqdk=seqd[seqd!=i&seqd!=j]
for(k in seqdk){
CC=cond_cor(CorM[i,j],CorM[i,k],CorM[j,k])
zeta=0.5*log((1+CC)/(1-CC))
n=dim(deug$tab)[1]
S=sqrt(n-1-3)*abs(zeta)
B=rbind(B,c(i,j,k,S))
}
}
}
return(B)
}
cont_IndTest(deug$tab)
contM=cont_IndTest(deug$tab)
contM[,4]
contM[,4]>qnorm(0.95)
contMTF=contM[,4]>qnorm(0.95)
contMTF
?"factanal"
###### Q5  Latent Factor   ##########
####Examples
# A little demonstration, v2 is just v1 with noise,
# and same for v4 vs. v3 and v6 vs. v5
# Last four cases are there to add noise
# and introduce a positive manifold (g factor)
v1 <- c(1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,4,5,6)
v2 <- c(1,2,1,1,1,1,2,1,2,1,3,4,3,3,3,4,6,5)
v3 <- c(3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,5,4,6)
v4 <- c(3,3,4,3,3,1,1,2,1,1,1,1,2,1,1,5,6,4)
v5 <- c(1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,6,4,5)
v6 <- c(1,1,1,2,1,3,3,3,4,3,1,1,1,2,1,6,5,4)
m1 <- cbind(v1,v2,v3,v4,v5,v6)
cor(m1)
plot(cor(m1))
?plot3
?3plot
?3dplot
?plot3d
test=cor(m1)
cor(m1)
m1
factanal(m1, factors = 3) # varimax is the default
factanal(m1, factors = 3, rotation = "promax")
prcomp(m1) # signs may depend on platform
## formula interface
factanal(~v1+v2+v3+v4+v5+v6, factors = 3,
scores = "Bartlett")$scores
## a realistic example from Bartholomew (1987, pp. 61-65)
utils::example(ability.cov)
install.packages('ggplot')
install.packages('ggplot2')
?ggplot
??ggplot
?aes
??aes
lty <- c("blank", "solid", "dashed", "dotted", "dotdash",
"longdash","twodash")
linetypes <- data.frame(
y = seq_along(lty),
lty = lty
)
ggplot(linetypes, aes(0, y)) +
geom_segment(aes(xend = 5, yend = y, linetype = lty)) +
scale_linetype_identity() +
geom_text(aes(label = lty), hjust = 0, nudge_y = 0.2) +
scale_x_continuous(NULL, breaks = NULL) +
scale_y_continuous(NULL, breaks = NULL)
library(ggplo2)
lty <- c("blank", "solid", "dashed", "dotted", "dotdash",
"longdash","twodash")
linetypes <- data.frame(
y = seq_along(lty),
lty = lty
)
ggplot(linetypes, aes(0, y)) +
geom_segment(aes(xend = 5, yend = y, linetype = lty)) +
scale_linetype_identity() +
geom_text(aes(label = lty), hjust = 0, nudge_y = 0.2) +
scale_x_continuous(NULL, breaks = NULL) +
scale_y_continuous(NULL, breaks = NULL)
library(ggplo2)
install.packages("ggplot2")
library(ggplot2)
lty <- c("blank", "solid", "dashed", "dotted", "dotdash",
"longdash","twodash")
linetypes <- data.frame(
y = seq_along(lty),
lty = lty
)
ggplot(linetypes, aes(0, y)) +
geom_segment(aes(xend = 5, yend = y, linetype = lty)) +
scale_linetype_identity() +
geom_text(aes(label = lty), hjust = 0, nudge_y = 0.2) +
scale_x_continuous(NULL, breaks = NULL) +
scale_y_continuous(NULL, breaks = NULL)
x<-c(1:5)
y<-x*8
?lm
mol1~lm(x~y)
summary(mol1)
mol1<-lm(x~y)
summary(mol1)
y
x
?dhyper
dhyper(0,m=26,n=26,k=5)
?choose
choose(2,3)
choose(3,2)
choose(3,1)
choose(3,0)
choose(52,26)
t1<-choose(5,0)
t2<-choose(47,26)
t3<-choose(52,26)
a<-t1*t2/t3
a
library("ISLR")
Hitters
?Hitters
summary(Hitters)
lm(Salary~AtBat + Hits, data = Hitters)
plot(lm(Salary~AtBat + Hits, data = Hitters))
Advertising
rm(list=ls())
rm(list=ls())
##### GOFMC toy problem.  X is bivariate normal with mean vector
mu <- c(1, 1)
mu
V <- matrix(c(1, 0.5, 0.5, 1), 2, 2)
?eigen
eigen(V, symmetric = TRUE, only.values = TRUE)
eigen(V, symmetric = TRUE, only.values = FALSE)
?prob
?prod
eigen(V, symmetric = TRUE, only.values = FALSE)$values
prod(eigen(V, symmetric = TRUE, only.values = FALSE)$values)
detV <- prod(eigen(V, symmetric = TRUE, only.values = TRUE)$values)
detV
V
solve(V)
library(VGAM)
install.packages("VGAM")
install.packages("VGAM")
# function that gives the density of normal distribution
# for given mean and sd, scaled to be on a count metric
# for the histogram: count = density * sample size * bin width
f <- function(x, var, bw = 15) {
dnorm(x, mean = mean(var), sd(var)) * length(var)  * bw
}
# setup base plot
p <- ggplot(dat, aes(x = apt, fill=prog))
clc
clear(ls=list())
# rm(): Remove Objects from a Specified Environment
rm(list=ls())
library(VGAM)
library(GGally)
library(ggplot2)
dat <- read.csv("/Users/huwei/Documents/WP_Blog/20171107 Tobit/tobit.csv")
summary(dat)
# for given mean and sd, scaled to be on a count metric
# for the histogram: count = density * sample size * bin width
f <- function(x, var, bw = 15) {
dnorm(x, mean = mean(var), sd(var)) * length(var)  * bw
}
# setup base plot
p <- ggplot(dat, aes(x = apt, fill=prog))
# histogram, coloured by proportion in different programs
# with a normal distribution overlayed
p + stat_bin(binwidth=15) +
stat_function(fun = f, size = 1,
args = list(var = dat$apt))
p + stat_bin(binwidth = 1) + stat_function(fun = f, size = 1, args = list(var = dat$apt,
bw = 1))
p + stat_bin(binwidth = 1) + stat_function(fun = f, size = 1, args = list(var = dat$apt,
bw = 1))
cor(dat[, c("read", "math", "apt")])
# plot matrix
ggpairs(dat[, c("read", "math", "apt")])
summary(m <- vglm(apt ~ read + math + prog, tobit(Upper = 800), data = dat))
ctable <- coef(summary(m))
pvals <- 2 * pt(abs(ctable[, "z value"]), df.residual(m), lower.tail = FALSE)
cbind(ctable, pvals)
m2 <- vglm(apt ~ read + math, tobit(Upper = 800), data = dat)
(p <- pchisq(2 * (logLik(m) - logLik(m2)), df = 2, lower.tail = FALSE))
b <- coef(m)
se <- sqrt(diag(vcov(m)))
cbind(LL = b - qnorm(0.975) * se, UL = b + qnorm(0.975) * se)
dat$yhat <- fitted(m)[,1]
dat$rr <- resid(m, type = "response")
dat$rp <- resid(m, type = "pearson")[,1]
par(mfcol = c(2, 3))
with(dat, {
plot(yhat, rr, main = "Fitted vs Residuals")
qqnorm(rr)
plot(yhat, rp, main = "Fitted vs Pearson Residuals")
qqnorm(rp)
plot(apt, rp, main = "Actual vs Pearson Residuals")
plot(apt, yhat, main = "Actual vs Fitted")
})
library(MASS)
# rm(): Remove Objects from a Specified Environment
rm(list=ls())
library(MASS)
library(foreign)
cdata <- read.csv("http://www.karlin.mff.cuni.cz/~pesta/prednasky/NMFM404/Data/crime.csv")
cdata <- read.csv("http://www.karlin.mff.cuni.cz/~pesta/prednasky/NMFM404/Data/crime.csv")
summary(cdata)
summary(ols <- lm(crime ~ poverty + single, data = cdata))
opar <- par(mfrow = c(3, 2), oma = c(0, 0, 1.1, 0))
plot(ols, las = 1)
plot(ols, which=c(4,6))
d1 <- cooks.distance(ols)
r <- stdres(ols)
a <- cbind(cdata, d1, r)
a[d1 > 4/51, ]
rabs <- abs(r)
a <- cbind(cdata, d1, r, rabs)
asorted <- a[order(-rabs), ]
asorted[1:10, ]
summary(rr.huber <- rlm(crime ~ poverty + single, data = cdata))
hweights <- data.frame(state = cdata$state, resid = rr.huber$resid, weight = rr.huber$w)
hweights2 <- hweights[order(rr.huber$w), ]
hweights2[1:15, ]
rr.bisquare <- rlm(crime ~ poverty + single, data = cdata, psi = psi.bisquare)
summary(rr.bisquare)
biweights <- data.frame(state = cdata$state, resid = rr.bisquare$resid, weight = rr.bisquare$w)
biweights2 <- biweights[order(rr.bisquare$w), ]
biweights2[1:15, ]
rm(list=ls())
cdata <- read.csv("http://www.karlin.mff.cuni.cz/~pesta/prednasky/NMFM404/Data/crime.csv")
#cdata <- read.csv("/Users/huwei/Documents/WP_Blog/20171107 NMFM404/RobustReg/crime.csv")
cdata
help(mfrow)
??mfrow
?par
# OLS regression
summary(ols <- lm(crime ~ poverty + single, data = cdata))
opar <- par(mfrow = c(3, 2), oma = c(0, 0, 1.1, 0))
opar
?plot
plot(ols, las = 1)
plot(ols, which=c(4,6))
?plot
plot(ols)
?stdres
# From Cookie's Distance, we can identify obs 9, 25, 51 might be problematic
cdata[c(9, 25, 51), 1:2]
d1 <- cooks.distance(ols)
r <- stdres(ols)
a <- cbind(cdata, d1, r)
d1
a
a[d1 > 4/51, ]
?order
#  the absolute value of the residuals
rabs <- abs(r)
a <- cbind(cdata, d1, r, rabs)
order(-rabs)
rabs
# Robust regression is done by iterated re-weighted least squares (IRLS)
summary(rr.huber <- rlm(crime ~ poverty + single, data = cdata))
rr.huber$w
rr.huber$wresid
hweights
hweights <- data.frame(state = cdata$state, resid = rr.huber$resid, weight = rr.huber$w)
hweights
hweights2 <- hweights[order(rr.huber$w), ]
hweights2
hweights2[1:15, ]
?rlm
rr.bisquare <- rlm(crime ~ poverty + single, data = cdata, psi = psi.bisquare)
summary(rr.bisquare)
biweights <- data.frame(state = cdata$state, resid = rr.bisquare$resid, weight = rr.bisquare$w)
biweights2 <- biweights[order(rr.bisquare$w), ]
biweights2[1:15, ]
biweights
biweights2
pnorm(3.45)
1-pnorm(3.45)
pnorm(-0.77)
qnorm(0.95)
qnorm(0.99)
qnorm(0.999)
pnorm(1.96)
pnorm(2)
qnorm(0.995)
qnorm(0.95)
qnorm(0.975)
qnorm(0.995)
pnorm(3.45)
(1-pnorm(3.45))*2
(1-pnorm(0.77))*2
#==========================================#
# import csv file
#==========================================#
data<-read.csv("newsCorpora.R",header = F, sep="\t", stringsAsFactors = FALSE, nrows=2, col.names=paste0("C", 1:8))
#==========================================#
# import csv file
#==========================================#
data<-read.csv("newsCorpora.csv",header = F, sep="\t", stringsAsFactors = FALSE, nrows=2, col.names=paste0("C", 1:8))
getwd()
setRepositories("/Users/huwei/Dropbox/On_Local/1.Study/0.CityU ISP/Semester B 201718/IS6400 Business Data Analysis/StkPreHL/StkPreHL/NewsAggregatorDataset")
setwd("/Users/huwei/Dropbox/On_Local/1.Study/0.CityU ISP/Semester B 201718/IS6400 Business Data Analysis/StkPreHL/StkPreHL/NewsAggregatorDataset")
getwd()
setwd("/Users/huwei/Dropbox/On_Local/1.Study/0.CityU ISP/Semester B 201718/IS6400 Business Data Analysis/StkPreHL/StkPreHL/NewsAggregatorDataset")
# remove all the variables in the environment
rm(list=ls())
#==========================================#
# import csv file
#==========================================#
data<-read.csv("newsCorpora.csv",header = F, sep="\t", stringsAsFactors = FALSE, nrows=2, col.names=paste0("C", 1:8))
data
#==========================================#
# import csv file
#==========================================#
data<-read.csv("newsCorpora.csv",header = F, sep="\t", stringsAsFactors = FALSE, col.names=paste0("C", 1:8))
dim(data)
plot(data$C1,type = "l")
con <- textConnection('Name, ID\nAndorra, AD\nRussia, RU\n"VIRGIN ISLANDS, BRITISH", VG')
csv <- read.csv(con, quote='"')
con
csv
?read.csv
?read.table
#==========================================#
# import csv file
#==========================================#
data<-read.table("newsCorpora.csv",header = F, sep="\t", stringsAsFactors = FALSE, col.names=paste0("C", 1:8), quote = "")
#==========================================#
# import csv file
#==========================================#
data<-read.table("newsCorpora.csv",header = F, sep="\t", stringsAsFactors = FALSE, col.names=paste0("C", 1:8), fileEncoding = "UTF-8")
#==========================================#
# import csv file
#==========================================#
data<-read.table("newsCorpora.csv",header = F, sep="\t", col.names=paste0("C", 1:8), fileEncoding = "UTF-8")
#==========================================#
# import csv file
#==========================================#
data<-read.table("newsCorpora.csv",header = F, sep="\t", fill = T col.names=paste0("C", 1:8), fileEncoding = "UTF-8")
#==========================================#
# import csv file
#==========================================#
data<-read.table("newsCorpora.csv",header = F, sep="\t", fill = T, col.names=paste0("C", 1:8), fileEncoding = "UTF-8")
dim(data)
plot(data$C1)
